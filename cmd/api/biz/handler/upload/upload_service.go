// Code generated by hertz generator.

package upload

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"io"
	"log"
	"net/http"
	"os"

	upload "github.com/SIN5t/CancerCellDetectSys/cmd/api/biz/model/upload"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UploadFile .
// @router ccds/upload [POST]
func UploadFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req upload.UploadRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	file, err := c.FormFile("file_content")
	createDir("./temp/") // TODO 写入配置文件
	fileSavePath := "./temp/" + file.Filename

	// 创建文件
	output, err := os.Create(fileSavePath)
	if err != nil {
		hlog.Error(err.Error())
		c.JSON(http.StatusInternalServerError, err.Error())
	}
	defer output.Close()

	// 分块接收
	input, err := file.Open()
	if err != nil {
		hlog.Error(err.Error())
		c.JSON(http.StatusInternalServerError, err.Error())
	}
	defer input.Close()

	buffer := make([]byte, 1024*1024*5) //一次读取5M
	for {
		n, err := input.Read(buffer)
		if err != nil && err != io.EOF {
			hlog.Error(err.Error())
			c.JSON(http.StatusInternalServerError, err.Error())
		}
		if n == 0 {
			break
		}

		_, err = output.Write(buffer[:n])
		if err != nil {
			hlog.Error(err.Error())
			c.JSON(http.StatusInternalServerError, err.Error())
			return
		}

	}

	c.JSON(consts.StatusOK, &upload.UploadResponse{
		StatusCode: 0,
		StatusMsg:  "文件成功上传",
	})
}

func createDir(dirPath string) {
	// 判断目录是否存在
	_, err := os.Stat(dirPath)
	if os.IsNotExist(err) {
		// 目录不存在，创建目录
		err := os.MkdirAll(dirPath, 0755)
		if err != nil {
			log.Fatalf("Failed to create directory: %v", err)
		}
	} else if err != nil {
		log.Fatalf("Failed to check directory: %v", err)
	}

	log.Println("Directory exists or created successfully")
}
